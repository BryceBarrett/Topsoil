/*
 * Copyright 2014 CIRDLES.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.cirdles.topsoil;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.event.ActionEvent;
import javafx.geometry.HPos;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.util.StringConverter;
import org.cirdles.topsoil.chart.DataConverter;
import org.cirdles.topsoil.chart.MapTableColumn;
import org.cirdles.topsoil.chart.concordia.ErrorEllipse;
import org.cirdles.topsoil.chart.concordia.ErrorEllipseHolder;
import org.cirdles.topsoil.chart.concordia.MapToEllipseDataConverter;
import org.controlsfx.control.action.AbstractAction;
import org.controlsfx.control.action.Action;
import org.controlsfx.dialog.Dialog;

public class ColumnSelectorDialog extends Dialog {

    /*
     *References to the objects used by the ColumnSeletorView
     */
    TableView<Map> tableToRead;

    /**
     * Target who will receive data
     */
    ColumnSelectorDialogListener target;

    private final String MASTHEAD_TEXT = "Select the column for each variable.";

    /**
     * Name of the action (hence, text of the confirmation button)
     */
    private final String NAME_ACTION = "Create chart";

    private final ColumnSelectorView content;
    private final Action action;

    public ColumnSelectorDialog(TableView<Map> tableToReadArg, ColumnSelectorDialogListener targetArg) {
        super(null, null);

        tableToRead = tableToReadArg;
        target = targetArg;

        content = new ColumnSelectorView();
        action = new ColumnSelectorAction();

        setContent(content);
        getActions().addAll(action, Dialog.Actions.CANCEL);

        setResizable(false);
        setMasthead(MASTHEAD_TEXT);
    }

    /**
     * This interface is used by the target of the data to receive the data objects and factory generated by the
     */
    public interface ColumnSelectorDialogListener {

        /**
         * Used by a <code>ColumnSelectorView</code> to give the converter he created based the user choice.
         */
        public void receiveConverter(DataConverter<ErrorEllipse> converter);
    }

    /**
     * This UI element is used by the user to choose which column in the main table determine which value of an ellipse.
     *
     * @author Florent Pastor
     */
    private class ColumnSelectorView extends GridPane {

        /*
         Internal objects
         */
        MapKeyStringConverter choicebox_converter;


        /*
         ALL THE CHOICE BOX AND THEIR LABEL
         */
        ChoiceBox<Object> choicebox_x;
        Label label_x;
        String name_x = "x";

        ChoiceBox<Object> choicebox_y;
        Label label_y;
        String name_y = "y";

        ChoiceBox<Object> choicebox_sigmaX;
        Label label_sigmaX;
        String name_sigmaX = "\u03c3x";

        ChoiceBox<Object> choicebox_sigmaY;
        Label label_sigmaY;
        String name_sigmaY = "\u03c3y";

        ChoiceBox<Object> choicebox_rho;
        Label label_rho;
        String name_rho = "\u03c1";

        /*
         The little button down the window.
         */
        Button button_createchart;
        String name_createchart = "Create chart";

        public ColumnSelectorView() {
            super();
            choicebox_converter = new MapKeyStringConverter();
            setAlignment(Pos.CENTER);

            List<Object> list_columnkeys = new ArrayList<>(tableToRead.getColumns().size());
            for (TableColumn<Map, ?> column : tableToRead.getColumns()) {
                MapTableColumn column_map = (MapTableColumn) column;
                list_columnkeys.add(column_map.getKey());
            }

            setHgap(12);

            choicebox_x = create_choicebox(list_columnkeys, 0);
            choicebox_y = create_choicebox(list_columnkeys, 2);
            choicebox_sigmaX = create_choicebox(list_columnkeys, 1);
            choicebox_sigmaY = create_choicebox(list_columnkeys, 3);
            choicebox_rho = create_choicebox(list_columnkeys, 4);

            //Creaton of the labels
            label_x = createLabel(name_x, choicebox_x);
            label_y = createLabel(name_y, choicebox_y);
            label_sigmaX = createLabel(name_sigmaX, choicebox_sigmaX);
            label_sigmaY = createLabel(name_sigmaY, choicebox_sigmaY);
            label_rho = createLabel(name_rho, choicebox_rho);
            
            ColumnConstraints labelConstraints = new ColumnConstraints();
            labelConstraints.setHalignment(HPos.RIGHT);
            getColumnConstraints().add(labelConstraints);

            //Place the element in the gridpane
            placeElement(label_x, choicebox_x, 0);
            placeElement(label_y, choicebox_y, 2);
            placeElement(label_sigmaX, choicebox_sigmaX, 1);
            placeElement(label_sigmaY, choicebox_sigmaY, 3);
            placeElement(label_rho, choicebox_rho, 4);
        }

        /**
         * Create a <code>ChoiceBox</code> with the right parameters
         */
        private ChoiceBox<Object> create_choicebox(List keyscolumns, int item_selected) {
            ChoiceBox<Object> choicebox = new ChoiceBox<>();
            choicebox.getItems().addAll(keyscolumns);
            choicebox.setConverter(choicebox_converter);
            choicebox.getSelectionModel().select(item_selected);
            choicebox.setMinWidth(300);

            return choicebox;
        }

        /**
         * Create a label and link it to a node
         *
         * @param texte
         * @param labelFor
         * @return
         */
        private Label createLabel(String texte, Node labelFor) {
            Label result = new Label(texte);
            result.setLabelFor(labelFor);

            return result;
        }

        private void placeElement(Label label, ChoiceBox choicebox, int row) {
            add(choicebox, 1, row);
            add(label, 0, row);
        }

        /**
         * Class used to bind the name of a column with the key of the map value
         */
        private class MapKeyStringConverter extends StringConverter<Object> {

            @Override
            public String toString(Object key) {
                String name = null;
                for (TableColumn<Map, ?> column : tableToRead.getColumns()) {
                    MapTableColumn column_map = (MapTableColumn) column;
                    if (column_map.getKey().equals(key)) {
                        name = column.getText();
                    }
                }

                return name;
            }

            @Override
            public Object fromString(String string) {
                Object retour = null;
                for (TableColumn<Map, ?> column : tableToRead.getColumns()) {
                    MapTableColumn column_map = (MapTableColumn) column;
                    if (column_map.getText().equals(string)) {
                        retour = column_map.getKey();
                    }
                }

                return retour;
            }
        }
    }

    private class ColumnSelectorAction extends AbstractAction {

        public ColumnSelectorAction() {
            super(NAME_ACTION);
        }

        @Override
        public void execute(ActionEvent ae) {
            //Gathering of the Keys
            Object x = content.choicebox_x.getSelectionModel().getSelectedItem();
            Object y = content.choicebox_y.getSelectionModel().getSelectedItem();
            Object sigmax = content.choicebox_sigmaX.getSelectionModel().getSelectedItem();
            Object sigmay = content.choicebox_sigmaY.getSelectionModel().getSelectedItem();
            Object rho = content.choicebox_rho.getSelectionModel().getSelectedItem();
            
            MapToEllipseDataConverter converter = new MapToEllipseDataConverter(x, y, sigmax, sigmay, rho);
            
            hide();
            target.receiveConverter(converter);
            //Eat a Starbuck Hot Chocolate 
        }

    }
}
